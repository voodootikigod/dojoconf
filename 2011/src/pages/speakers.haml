-@tab = :speakers
-@flex = true
%h1 Speakers



%p{:style=>"margin-bottom: 2em;"} There will be a total of 20 amazing speakers that will be presenting at DojoConf 2011, we are posting them as soon as we have final confirmation over the next week, so be sure to check back. For now here are the agents that have been brought online for active duty.

%h4{:style=>"margin-bottom:0px; "} We Want To Hear From You
%p{:style=>"margin-bottom: 2em; margin-top: 0px"} If you want to present at DojoConf on a topic, product, or idea that you have, there will be a Track B for lightning talks and hackfests. Speaking in Track B is completely free form, but you must be a registered attendee. Sign up will be done at the conference, so start preparing your topic to present today and get ready.

.person.clearfix#arnold
  %img{:alt => "Brian Arnold", :height => "150", :src => "images/arnold.jpg", :width => "150"}/
  %h4
    %a{:href=>"http://twitter.com/#!/brianarn"}
      Brian Arnold
    = " - The Power of Promises"
  %p
    The Dojo Deferred is something that a lot of people use, due to its inclusion as part of the XHR system, but it's not something that a lot of people really understand. In this talk, we'll cover the distinctions between a Deferred and a promise, as well as ways to use them for so much more than simple XHR work.
  %p
    %strong Bio:
    Brian Arnold is the Lead Support & Software Engineer at SitePen. For over a decade, he has been immersed in web architecture and development for various companies spanning from edgy start-ups to AOL. In addition  to providing guidance and advice to SitePen?s Fortune 500 clients, Brian   works tirelessly as a Dojo evangelist heading up the massive Dojo   Tutorial effort and organizing nationwide Dojo Training Workshops to  enlighten the masses about the positive force that is Dojo.


.person.clearfix#zyp
  %img{:alt => "Kris Zyp", :height => "150", :src => "images/zyp.jpg", :width => "150"}/
  %h4
    %a{:href=>"http://twitter.com/#!/kriszyp"}
      Kris Zyp
    = " - A New Grid and Store Architecture"
  %p
    In this presentation we will look at the new d-list grid component combined with the object store API. The legacy DataGrid has grown very large and complicated over the years, and the new d-list component gives us a clean, lightweight architecture. The d-list is highly modular, with numerous plugins, making it simple and easy to extend. It is highly suited for mobile applications with a small footprint and touch scrolling capabilities. The d-list is also built around the Dojo Object Store architecture. The new store API also simplifies our design as well with clean minimal data providers. In this presentation we will look at the new architectural approaches to widget composition, event dispatching, hierarchy, CSS utilization, and more.
  %p
    %strong Bio:
    Kris Zyp is a Senior Engineer with SitePen, a core committer to Dojo,    the founder of Persevere, and the lead author of the JSON Schema    specification. He has been highly involved in various standards groups,    representing the Dojo foundation for EcmaScript, been an invited expert    for the W3C, and is on the steering committee for the OpenAjax alliance.    He has started or contributed to numerous open source projects including    RequireJS, Multi-node, Node-promise, Nodules, and others.
    
  


.person.clearfix#hann
  %img{:alt => "John Hann", :height => "150", :src => "images/hann.jpg", :width => "150"}/
  %h4
    %a{:href=>"http://twitter.com/#!/unscriptable"}
      John Hann
    = " - AMD module patterns"
  %p
    Much of the hype about AMD modules centers around performance and code size (and it's well-deserved).  But modules are as important to software architecture as dojo.declare()!
  %p
    In this session, we'll take a look at some classic, general-purpose patterns re-spun as AMD modules as well as a few advanced, implementation-specific patterns.
  %p
    Specifically, we'll cover:
  %ul
    %li Singletons, Decorators, Adapters
    %li Inversion of Control / Dependency Injection
    %li Mediators and inter-module coordination
    %li Model-View-Controller patterns
    %li Self-contained Widgets (js, css, and html)
    %li Strategies for sharing code on the server

  
  
  
.person.clearfix#corrandini
  %img{:alt => "Ryan Corradini", :height => "150", :src => "images/corradini.jpg", :width => "150"}/
  %h4
    %a{:href=>"http://twitter.com/#!/buyog"}
      Ryan Corradini
    = " - DataGrid Bootcamp: Extreme Performance Hacks for Big Data"
  %p
    We love the <a href="http://dojotoolkit.org/reference-guide/dojox/grid/DataGrid.html">Dojox DataGrid</a>. It has built-in pagination, dynamic data binding, flexible resizing, and all kinds of <em>sexy</em> customization options. However, when you operate in the world of <a href="http://en.wikipedia.org/wiki/Big_data">Big Data</a>, it can fall short of its promise, ballooning your memory footprint, crushing your JavaScript engine, and otherwise causing your users to <strong>curse your name</strong>.
  %p
    I'm going to walk through the lessons we've learned over the past 2+ years about how to use DataGrid to render extremely wide, extremely large data sets without thrashing your browser (or your users' will to live).


.person.clearfix#lee
  %img{:alt => "Daniel Lee", :height => "150", :src => "images/lee.jpg", :width => "150"}/
  %h4
    %a{:href=>"http://twitter.com/#!/DanielEricLee"}
      Daniel Lee
    = " - So You Think You Know Widgets"
  %p
    You're probably using Widgets, but are you <b>really</b> using Widgets? Do you know about Attribute Maps? Are your widgets leaking memory? Are you sure? Join <a href="http://enterprisedojo.com">enterprisedojo.com</a> Editor and all-around good guy Dan Lee as he leads a discussion on the finer points of custom Dojo widgets, some best practices on the subject, and important anti-patters to avoid. A nerdy good time will be had by all.


.person.clearfix#gibson
  %img{:alt => "Becky Gibson", :height => "150", :src => "images/gibson.jpg", :width => "150"}/
  %h4
    %a{:href=>"http://twitter.com/#!/becka11y"}
      Becky Gibson
    = " - Can Stephen Hawking use your Dojo App"
  %p
    Let's face it, not everyone has the same abilities.  Folks with vision or mobility impairments want to use Web applications, too!  The core widget set of Dojo is fully accessible to people who rely on the keyboard or assistive technologies like a screen reader to interact with the Web.  Your mission is to  learn how to make your Dojo apps accessible.  Your assigned agent will  decode the mysteries of ARIA  and will demo a fully accessible Dojo app!  Accept the challenge to make the Web inclusive for all!



.person.clearfix#montes
  %img{:alt => "Luis Montes", :height => "150", :src => "images/montes.jpg", :width => "150"}/
  %h4
    %a{:href=>"http://twitter.com/#!/monteslu"}
      Luis Montes
    = " - HTML5 Game with dojo"
  %p
    HTML5 game development is the hawtness.  There might not be an official dojox.game package, but there are dojo libraries that can help. This will be a survey of the amazing utilities you can use to create HTML5 games.
    



.person.clearfix#wilcox
  %img{:alt => "Mike Wilcox", :height => "150", :src => "images/wilcox.jpg", :width => "150"}/
  %h4
    %a{:href=>"http://twitter.com/#!/clubajax"}
      Mike Wilcox
    = " - Dojo and HTML5"
  %p
    HTML5 is all the rage these days and Dojo can help keep you from falling behind. HTML5 Audio? Check. Video? Naturally! Canvas? Of course! This presentation will show you how you can get the most of your HTML5 apps and not have to worry about that "other browser" because Dojo is there to make it all work.



.person.clearfix#thomas
  %img{:alt => "James Thomas", :height => "150", :src => "images/thomas.jpg", :width => "150"}/
  %h4
    %a{:href=>"http://twitter.com/#!/thomasj"}
      James Thomas
    = " - Dojo Web Builder - Building Dojo in the Cloud"
  %p
    Dojo's build system has long been one of the the toolkit's greatest, but least understood, features. Using the build system properly dramatically improves the performance of your application! 
  %p
    However.... Fiddling about with shell scripts?  Needing to download the full source distribution?  Understanding long READMEs and cryptic profile files?  Manually categorising your application dependencies? 
  %p
    Pffft, not any more! Using the newly launched Dojo Web Builder you can ignore all of the above and just your web browser. 
  %p
    Using the Web Builder you can easily search through the database of all Dojo modules, selecting those required, including themes, configuring optimisers and much more. The Web Builder compiles your custom Dojo version remotely and just returns you the result. 
  %p
    More importantly, the auto-analysis feature lets you make the Web Builder do the hard work for you. Point it at your unoptimised Dojo application and it'll generate a custom build having analysed your application's dependencies. 
  %p
    Finally, the project's now open source as an official Dojo Foundation project. Running the tool locally allows you to expose your own application's module through the Web Builder or build older versions of Dojo. 
  %p
    This talk will walk through using the tool's features, demonstrating common use cases and talking about the future plans to make it even simpler to generate Dojo builds. 
    




.person.clearfix#ruzand
  %img{:alt => "Patrick Ruzand", :height => "150", :src => "images/ruzand.jpg", :width => "150"}/
  %h4
    %a{:href=>"http://twitter.com/#!/mobicellar"}
      Patrick Ruzand
    = " - Advanced Symbology with GFX"
  %p
    The purpose of this presentation is to illustrate how the dojo graphic API (gfx) can be leveraged to build advanced features needed by rich graphical application. In particular, we will demontrate how to build gfx extensions enabling advanced symbology : a layout mechanism to arrange shapes automatically and dynamically, a simple templating engine and gfx data binding. These extensions will be demonstrated in action taking as an example a diagramming web application.
  %p
    %b About the presenter: 
    %br
    Patrick Ruzand is a Software Engineer at IBM and a contributor to the Dojo Open source project, in particular for the 2D graphic API (dojox.gfx). He has 12 years of experience in advanced visualization components architecture and development targeting the Java and .NET desktop plateforms, and the Dojo/HTML5 and Microsoft Silverlight rich internet applications (RIA) plateforms. 

  
    
    
    
    
    
    
.person.clearfix#barber
  %img{:alt => "Chris Barber", :height => "150", :src => "images/barber.jpg", :width => "150"}/
  %h4
    %a{:href=>"http://twitter.com/#!/cb1kenobi"}
      Chris Barber
    = " - The Art of Developing Nano Widgets"
  %p
    Dojo's flagship widget system, dijit, is packed full of features and packed full of bytes that result in longer download, parse, and execution times. Sometimes you just need a lightweight widget that doesn't have all the extra stuff dijit provides.
  %p
    This talk describes the basic principals for designing non-dijit widgets that are small and fast containing only the functionality you need.  We'll take dijit widgets such as the AccordionContainer, then hack it down to a fraction of the functionality and size.









.person.clearfix#guillen
  %img{:alt => "Revin Guillen", :height => "150", :src => "images/guillen.jpg", :width => "150"}/
  %h4
    %a{:href=>"http://twitter.com/#!/revin"}
      Revin Guillen
    = " - Machiavelli 'n Dojo"
  %p
    "Machiavellian" is usually pejorative, a term laced with disdain and subtle contempt. However, to actually read Machiavelli is to study applied Realism in the context of meeting goals. As a community, we (Dojo) have certain goals; how can we reach them effectively? How can we best position ourselves in the toolkit/library ecosystem in order to reach our goals? How can we survive in a world more and more infatuated with tiny individual libraries, when the perception is that Dojo is heavy? Machiavelli provides us with keen insights into human nature—insights that still serve us well nearly 500 years later.






.person.clearfix#gill
  %img{:alt => "Rawld Gill", :height => "150", :src => "images/gill.jpg", :width => "150"}/
  %h4
    %a{:href=>"http://twitter.com/#!/Rawld"}
      Rawld Gill
    = " - What's broke with Rails, Django, and every other web app framework...and how to fix them"
      
  %p
    "[Rails] has become the framework of choice for implementation [...] of Web 2.0 applications" --Agile Web Development with Rails <i>2006</i>
  %p
    Really? Then why isn't everybody using Rails in 2011? Did something else replace it? Yes. The 100 other frameworks that were around before it, or came after it, and make the same claims. Isn't it obvious with so many competing frameworks that <b>none of them are solving the problem</b>?
  %p
    Our mental model of a web app is clearly broke. But there is hope: the Javascript community with recent advances in powerful client-side toolkits like Dojo have provided the necessary missing pieces to compose a new design for web apps that can provide an order of magnitude reduction in complexity--resulting in the ability to write better applications, faster, at less cost.
  %p
    In this talk, I'll:
  %ul
    %li Argue the current web app framework landscape is a disaster
    %li Show the de facto mental model underlying these frameworks is ludicrous
    %li Describe a new mental model, termed ""browser-compute"", including specific architectural prescriptions and proscriptions
    %li Describe how the advanced core capabilities of a Javascript library like Dojo are required to make the new model work
    %li Demonstrate a couple of concepts in code

.person.clearfix
  %img{:alt => "Mark Wubben", :height => "150", :src => "images/wubben.jpg", :width => "150"}/
  %h4
    %a{:href=>"http://twitter.com/#!/novemberborn"}
      Mark Wubben
    = " - Mustache? I'll raise you an Eyebrow! — Reactive Templates and Widgets with Eyebrow templates"
  %p
    At <a href="http://state.it">State</a> we're building a platform and website for people to share opinions. We've developed a new template system named Eyebrow, based on Mustache and DTL. It has template inheritance, filters, template variables custom tags and if/else logic. It's also DOM-aware. In Node, we parse the template syntax and run the markup through JSDOM. This gives us an AST for both template tags and the DOM nodes. We can use this to compile a Node module for server-side rendering and a JSON definition for the browser runtime. In the browser, this gives us reactive templates where model changes are automatically reflected in the DOM, down to the text node level.
  %p
    Eyebrow also manages our Dojo widgets, taking care of attaching events and maintaining attach points. This leads to a new and interesting approach for writing Dojo widgets. They can become much more like controllers: handling DOM events, implementing application logic and updating a model. The view will automatically reflect the changes. Here's an example of a widget that automatically renders what you type into an `&lt;input>` field:
  %p
    Example.html.eyebrow:
  ='<script src="https://gist.github.com/1085129.js?file=gistfile1.html"></script>'
  %p
    Example.js
  ='<script src="https://gist.github.com/1085130.js?file=gistfile1.js"></script>'
  %p
    In this talk I’ll show what Eyebrow looks like under the covers, how it’s used to build our site and discuss how it changes web application development.
  

.person.clearfix#hasson
  %img{:alt => "Laurent Hasson", :height => "150", :src => "images/hasson.jpg", :width => "150"}/
  %h4
    %a{:href=>"http://twitter.com/#!/ldhasson"}
      Laurent Hasson
    = " - Web apps on the BlackBerry PlayBook"
  %p
    This session will provide you with an in-depth account of building a mobile web game for the  BlackBerry PlayBook using the WebKit web  browser and the BlackBerry Webworks platform. I will recount the lessons learnt while developing such an app, why mobile is truly different and how you can adapt your desktop Dojo skills for the job at hand. I will lay down a few best practices that are emerging, and then cap it all with a description of how you can submit your own app on BlackBerry AppWorld.
    
.person.clearfix#russell
  %img{:alt => "Alex Russell", :height => "150", :src => "images/russell.jpg", :width => "150"}/
  %h4
    %a{:href=>"http://infrequently.org/"}
      Alex Russell
    = " - Frameworks.next: How Faster Browser Evolution Will Change How We Think"
  %p
    Dojo provides a stable, dependable, best-you-can-get solution for designers and developers who want flexibility, performance, reach, and fewer headaches down the road. Mobile is starting to challenge some of the assumptions that makes it possible for to deliver these attributes in a single codebase, and new frameworks are emerging to fill the gaps created by new constraints -- better standards support on average, different network latencies, different form factors, etc.
  %p
    This talk explores how language, platform, and market evolution will change the dynamic further and faster, allowing the Dojo community to consider new approaches...if we can muster the will to get out in front of it.

.person.clearfix#schiemann
  %img{:alt => "Dylan Schiemann", :height => "150", :src => "images/schiemann.jpg", :width => "150"}/
  %h4
    %a{:href=>"http://dylanschiemann.com/"}
      Dylan Schiemann
    = " - Dojo 2.0: Reinventing Web App Development"
  %p
    Opening keynote showing off the latest and greatest in Dojo, and the vision for the present and future.
    
.person.clearfix
  %img{:alt => "Peter Higgins", :height => "150", :src => "images/higgins.jpg", :width => "150"}/
  %h4
    %a{:href=>"http://higginsforpresident.net/"}
      Peter Higgins
    = " - has, feature detection, and optimized builds"
  %p
    %img{:src=>"/images/spinner.gif", :style=>"margin-right: 12px"}
    Feature detection in process. Please wait...
    
    